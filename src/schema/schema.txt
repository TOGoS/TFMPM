import 'http://ns.nuke24.net/Schema/comment'
import 'http://ns.nuke24.net/Schema/isNullable'
import 'http://ns.nuke24.net/Schema/defaultValue'
import 'http://ns.nuke24.net/Schema/valueType'
import 'http://ns.nuke24.net/Schema/longName'
import 'http://ns.nuke24.net/Schema/Functions/Unindent'
import 'http://ns.nuke24.net/Schema/Types/Number'
import 'http://ns.nuke24.net/Schema/DataTypeTranslation/sqlType'
import 'http://ns.nuke24.net/Schema/DataTypeTranslation/phpType'
import 'http://ns.nuke24.net/Schema/DataTypeTranslation/jsonType'
import 'http://ns.nuke24.net/Schema/DataTypeTranslation/regex'
import 'http://ns.nuke24.net/Schema/Application/hasADatabaseTable'
import 'http://ns.nuke24.net/Schema/Application/hasARestService'
import 'http://ns.nuke24.net/Schema/Application/membersArePublic'
import 'http://ns.nuke24.net/Schema/RDB/nameInDatabase'
import 'http://ns.nuke24.net/Schema/RDB/Schema'
import 'http://ns.nuke24.net/Schema/RDB/Sequence'
import 'http://ns.nuke24.net/Schema/RDB/initialValue'
import 'http://ns.nuke24.net/Schema/RDB/defaultValueSequence'
import 'http://ns.nuke24.net/Schema/RDB/isAutoIncremented'
import 'http://ns.nuke24.net/Schema/RDB/isInNamespace'
import 'http://ns.nuke24.net/Schema/RDB/isSelfKeyed'
import 'http://schema.org/True' as 'true'
import 'http://schema.org/False' as 'false'
import 'http://www.w3.org/2000/01/rdf-schema#isSubclassOf' as 'extends'

class 'integer' :
        SQL type @ "INT" :
        PHP type @ "int" : JSON type @ "number"
class 'unsigned integer' : extends(integer) :
	SQL type @ "INT UNSIGNED" : regex @ "\\d+"
class 'boolean' :
        SQL type @ "BOOLEAN" :
        PHP type @ "bool" : JSON type @ "boolean"
class 'string' :
        SQL type @ "VARCHAR(126)" :
        PHP type @ "string" : JSON type @ "string"
class 'normal ID' : extends(unsigned integer)
class 'entity ID' : extends(unsigned integer) : PHP type @ "string" : SQL type @ "BIGINT"
class 'code' : extends(string) : SQL type @ "CHAR(4)" : regex @ "[A-Za-z0-9 _-]{1,4}"
class 'text' : extends(string) : SQL type @ "TEXT"
class 'HTML fragment' : extends(text) : comment @ "a block of HTML"
class 'hash' : extends(string) : regex @ "[A-Fa-f0-9]{40}" : comment @ "Hex-encoded SHA-1 of something (40 bytes)"
class 'e-mail address' : extends(string) : regex @ "[^\\s@]+@[^\\s@]+"
class 'URI' : extends(string)
class 'time' : extends(string) : SQL type @ "TIMESTAMP"
class 'date' : extends(string) : SQL type @ "DATE"
# Address components
class 'postal code' : extends(string)
class 'region code' : extends(string) :
	SQL type @ "CHAR(2)" :
	regex @ "[A-Z]{2}" :
	comment @ "2-letter state code."
class 'country code' : extends(string) :
	SQL type @ "CHAR(3)" :
	regex @ "[A-Z]{3}" :
	comment @ "ISO 3166-1 alpha-3 3-letter country code."
# Large ID types
class 'blob ID' : extends(string) :
        SQL type @ "CHAR(32)" :
        regex @ "[A-Z2-7]{32}" :
        comment @ "Base32-encoded SHA-1 of the blob"
class 'picture ID' : extends(blob ID)

# 'entity ID' used as a type should still work separately
redefine property 'entity ID' : value type @ entity ID :
	long name @ "http://ns.nuke24.net/Phrebar/entityId" :
	comment @ "Entity ID for this thing"

class property 'collection name' : value type @ string :
	long name @ "http://ns.earthit.com/CMIPREST/collectionName" :
	comment @ "Name of the set of members of this class; usually this would be the plural form of the class name"

reference property 'inverse collection name': value type @ string :
	long name @ "http://ns.earthit.com/CMIPREST/inverseCollectionName"
reference property 'inverse name'            : value type @ string :
	long name @ "http://ns.earthit.com/CMIPREST/inverseName"

# TODO: Make these more officially part of the Schema/Application schema
class property 'records are immutable' : value type @ boolean :
	long name @ "http://ns.nuke24.net/Schema/Application/recordsAreImmutable" :
	comment @ "Indicates that records of this class are immutable, once written."
class property 'record set is immutable' : value type @ boolean :
	long name @ "http://ns.nuke24.net/Schema/Application/recordSetIsImmutable" :
	comment @ "Indicates that the set of records of this class is fixed as far as application code is concerned."
field property 'value is calculated' : value type @ boolean :
	long name @ "http://ns.nuke24.net/Schema/Application/valueIsCalculated" :
	comment @ "Indicates that the field's value is a function of other data, so cannot be edited directly."
field property 'uses user text canonicalization rules' :
	long name @ "http://ns.nuke24.net/Schema/Application/usesUserTextCanonicalizationRules" :
	comment @ "Means text is stored trimmed, and null when empty for nullable fields"
field property 'is content hash-based ID' :
	long name @ "http://ns.nuke24.net/Schema/RDB/isContentHashBasedId" :
	comment @ unindent @ «
		Applies to primary key fields whose value is calculated based on the primary content of the record,
		making the record by definition immutable.
		Mutable metadata (last access time, etc) may be stored
		with the record as long as not included with the hash.
	»

reference property 'indicates owner' :
	long name @ "http://ns.nuke24.net/Schema/Application/indicatesOwner" : comment @ unindent @ «
		The thing pointed to by this reference is the owns this object
		for permission checking purposes.
	»
reference property 'indicates ownee' :
	long name @ "http://ns.nuke24.net/Schema/Application/indicatesOwnee" : comment @ unindent @ «
		The thing pointed to by this reference is the owned by this object
		for permission checking purposes.
	»

schema 'tfmpm'

sequence 'new entity ID' : initial value @ 1001 : is in namespace @ 'tfmpm' :
	long name @ "urn:x-the-new-entity-id-sequence" # Meaningless long name for schema.php

field modifier 'AIPK' = normal ID : is auto-incremented : key(primary)
field modifier 'EIPK' = entity ID : default value sequence @ new entity ID : key(primary)
field modifier 'HJPK' = blob ID : is content hash-based ID : key(primary) : comment @ "ID = base32encode(sha1(json(canonocalize(record))))"
# SRC = 'standard resource class'
field modifier 'SRC' = has a database table : has a REST service : is in namespace @ 'tfmpm'

field modifier UTCR = uses user text canonicalization rules

class 'entity' : comment @ «
	Abstract class for all things that have an entity ID as their ID.
	There might not be an entity table in the database,
	but for schema definition purposes, things that link to 'any entity'
	can have a reference to this class.
» {
	ID : EIPK
}

class 'user' : SRC : entity ID @ 1000021 {
	ID : EIPK
	username : string
	passhash : hash : nullable
	e-mail address : e-mail address : nullable
}

class 'token action' : has a database table : is in namespace @ 'tfmpm' : entity ID @ 1000022 {
	token hash : hash : key(primary)
	half user : reference(user) : comment @ unindent @ «
		User on whose beHALF the action will be done.
	» = ID = half user ID
	action script : text
	re-useable : boolean
	expiration time : time : nullable
	usage time : time : nullable
}

class 'postal address' : records are immutable : SRC : entity ID @ 1000023 {
	ID : HJPK
	street address : string : nullable : UTCR
	unit address : string : nullable : UTCR
	city name : string : nullable : UTCR
	region code : region code : nullable : UTCR
	postal code : postal code : nullable : UTCR
	country code : country code : nullable : UTCR
}

class 'organization' : SRC : entity ID @ 1000024 {
	ID : EIPK
	name : string
	parent : reference(organization) : indicates owner : nullable = ID = parent ID
}

class 'entity postal address' : SRC : self-keyed : entity ID @ 1000025 {
	entity ID : entity ID
	entity : reference(entity) : indicates owner = ID = entity ID
	address : reference(postal address) = ID = postal address ID
}

class 'user role' : SRC : entity ID @ 1000026 {
	ID : EIPK
	name : string
}

class 'resource class' : record set is immutable : SRC : entity ID @ 1000036 {
	ID : EIPK
	name : string : comment @ "Name of resource class as spelled in schema.txt"
}

class 'action class' : record set is immutable : SRC : entity ID @ 1000027 : comment @ unindent @ «
	e.g. 'create', 'read', 'update', 'move-to', 'move-from'
» {
	name : string : key(primary)
	description : text : nullable
}

class 'user role permission' : SRC : entity ID @ 1000028 {
	role : reference(user role) : key(primary) = ID = role ID
	resource class : reference(resource class) : key(primary) = ID = resource class ID
	action class : reference(action class) : key(primary) = name = action class name
	applies system-wide : boolean : comment @ "Good for superuser roles!"
	applies at attachment point : boolean
	applies above attachment point : boolean
	applies below attachment point : boolean
}

class 'user organization attachment' : SRC : self-keyed : entity ID @ 1000029 {
	# first 'user' is the name of the property of a 'user organization attachment'
	# reference(user) means that this property is a reference to a 'user' record
	# { ID = user ID } means the 'ID' of the 'user' record matches the 'user ID' field of this record
	user : reference(user) = ID = user ID
	role : reference(user role) = ID = role ID
	organization : reference(organization) : indicates owner = ID = organization ID
}

class 'default user role' : SRC : self-keyed {
	role : reference(user role) : key(primary) = ID = role ID
	require login : boolean
}

# Actual enums are hard.
# Best practice according to Dan is avoid defining enum types and just always use a table.
class 'computation status' : SRC : members are public : entity ID @ 1000030 {
	status code : string : key(primary)
}

class 'computation' : SRC : members are public : entity ID @ 1000031 {
	expression : string : key(primary)
	status : reference(computation status) = status code
	result : string : nullable
}

# Demonstrate an order system or something

class 'product' : SRC : members are public : entity ID @ 1000032 {
	ID : EIPK
	UPC : string
	title : string
	description HTML : HTML fragment
}

class 'order' : SRC : entity ID @ 1000033 {
	ID : EIPK
	user : reference(user) = ID = user ID
	shipping address : reference(postal address) = ID = shipping address ID
	billing address : reference(postal address) = ID = billing address ID
}

class 'order item' : SRC : entity ID @ 1000034 {
	order : reference(order) = ID = order ID
	product : reference(product) = ID = product ID
	quantity : integer : default value @ 1
}
