#!//usr/bin/env php
<?php

$selfDir = dirname(__DIR__);
require_once "$selfDir/init-environment.php";

$dbcConfig = $TFMPM_Registry->getConfig('dbc');
$dbFile = $dbcConfig['path'];
$TFMPM_Registry->systemUtil->unlink($dbFile);

class TFMPM_DatabaseUpgrader extends TFMPM_Component
{
	public function runUpgrades() {
		$upgradesDir = "{$this->registry->projectRootDir}/src/db-migrations/upgrades";
		$upgradeFiles = scandir($upgradesDir);
		$this->log("Running upgrade scripts...");
		foreach( $upgradeFiles as $f ) {
			if( $f[0] == '.' ) continue; // e.g. . and ..
			$file = "$upgradesDir/$f";
			$this->log("  Running $file...");
			$this->sqlRunner->doRawQuery(file_get_contents($file));
		}
	}
}

$TFMPM_Registry->databaseUpgrader->runUpgrades();
$inserter = $TFMPM_Registry->mapRecordInserter;

$errors = array();
$logFiles = glob("logs/*.jsonl");
$inserter->log("Processing log files...");
foreach( $logFiles as $logFile ) {
	$inserter->log("  $logFile...");
	$fh = fopen( $logFile, "rb" );
	if( $fh === false ) {
		$errors[] = array('message'=>"Failed to open $logFile");
		continue;
	}
	$lineNumber = 1;
	while( ($line = fgets($fh)) ) {
		$lineMd = array(
			'fileName' => $logFile,
			'lineNumber' => $lineNumber
		);
		$line = trim($line);
		if( $line == '' or $line[0] == '#' ) continue;
		$info = json_decode($line, true);
		if( $info === null && $line !== 'null' ) {
			$errors[] = array('message'=>"Error decoding JSON at $logFile:$lineNumber");
			continue;
		}
		$inserter->item($info, $lineMd);
		++$lineNumber;
	}
	fclose($fh);
}

if( count($errors) > 0 ) {
	fwrite(STDERR, "Oh no there were problems\n");
	foreach( $errors as $err ) {
		if( isset($err['filename']) and isset($err['lineNumber']) ) {
			$pfx = "at {$err['filename']}:{$err['lineNumber']}: ";
		} else $pfx = '';
		fwrite(STDERR, "  $pfx{$err['message']}\n");
	}
}
// TODO: Scan log files, insert rex
